https://www.w3schools.com/xml/ajax_xmlhttprequest_create.asp


AJAX = Asynchronous JavaScript And XML.

AJAX is not a programming language.

AJAX just uses a combination of:


AJAX just uses a combination of:

    A browser built-in XMLHttpRequest object (to request data from a web server)
    JavaScript and HTML DOM (to display or use the data)


AJAX is a misleading name. AJAX applications might use XML to transport data, but it is equally common to transport data as plain text or JSON text.




    1. An event occurs in a web page (the page is loaded, a button is clicked)
    2. An XMLHttpRequest object is created by JavaScript
    3. The XMLHttpRequest object sends a request to a web server
    4. The server processes the request
    5. The server sends a response back to the web page
    6. The response is read by JavaScript
    7. Proper action (like page update) is performed by JavaScript



        The XMLHttpRequest Object

    All modern browsers support the XMLHttpRequest object.

    The XMLHttpRequest object can be used to exchange data with a server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.


      000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


        Access Across Domains

    For security reasons, modern browsers do not allow access across domains.

    This means that both the web page and the XML file it tries to load, must be located on the same server.


        000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

        Old Versions of Internet Explorer (IE5 and IE6)

    Old versions of Internet Explorer (IE5 and IE6) use an ActiveX object instead of the XMLHttpRequest object:
    variable = new ActiveXObject("Microsoft.XMLHTTP");



    if (window.XMLHttpRequest) {
        // code for modern browsers
        xmlhttp = new XMLHttpRequest();
     } else {
        // code for old IE browsers
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }




      000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


XMLHttpRequest Object Methods

new XMLHttpRequest() 	                 Creates a new XMLHttpRequest object
abort() 	                             Cancels the current request
getAllResponseHeaders() 	             Returns header information
getResponseHeader() 	                 specific header information


open(method,url,async,user,psw)       Specifies the request
                                      method: the request type GET or POST
                                      url: the file location
                                      async: true (asynchronous) or false (synchronous)
                                      user: optional user name
                                      psw: optional password


send()                                Sends the request to the server
                                      Used for GET requests

send(string)                          Sends the request to the server.
                                      Used for POST requests

setRequestHeader() 	                  Adds a label/value pair to the header to be sent




XMLHttpRequest Object Properties

onreadystatechange                   	Defines a function to be called when the readyState property changes

readyState                            Holds the status of the XMLHttpRequest.
                                      0: request not initialized
                                      1: server connection established
                                      2: request received
                                      3: processing request
                                      4: request finished and response is ready

responseText                         	Returns the response data as a string

responseXML 	                        Returns the response data as XML data


status                                Returns the status-number of a request
                                      200: "OK"
                                      403: "Forbidden"
                                      404: "Not Found"
                                      For a complete list go to the Http Messages Reference

statusText 	                            Returns the status-text (e.g. "OK" or "Not Found")



000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
file send_request.html


Send a Request To a Server

xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();


open(method,url,async,user,psw)       Specifies the request
                                      method: the request type GET or POST
                                      url: the file location
                                      async: true (asynchronous) or false (synchronous)
                                      user: optional user name
                                      psw: optional password


send()                                Sends the request to the server
                                      Used for GET requests

send(string)                          Sends the request to the server.
                                      Used for POST requests


      00000000000000000000000 the file comes from the same directory the html file is in


000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

      GET or POST?

      GET is simpler and faster than POST, and can be used in most cases.

      However, always use POST requests when:

          A cached file is not an option (update a file or database on the server).
          Sending a large amount of data to the server (POST has no size limitations).
          Sending user input (which can contain unknown characters), POST is more robust and secure than GET.


          xhttp.open("GET", "demo_get.asp", true);
          xhttp.send();

          00000000000to avoid a cached results add a unique ID to the URL

          xhttp.open("GET", "demo_get.asp?t=" + Math.random(), true);
          xhttp.send();

          If you want to send information with the GET method, add the information to the URL:

          xhttp.open("GET", "demo_get2.asp?fname=Henry&lname=Ford", true);
          xhttp.send();

  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000



       POST Requests

        A simple POST request:


        xhttp.open("POST", "demo_post.asp", true);
        xhttp.send();

        To POST data like an HTML form, add an HTTP header with setRequestHeader(). Specify the data you want to send in the send() method:

      xhttp.open("POST", "demo_post2.asp", true);
       xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
       xhttp.send("fname=Henry&lname=Ford");

        setRequestHeader() 	    Adds a label/value pair to the header to be sent



    000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000




    The url - A File On a Server

    The url parameter of the open() method, is an address to a file on a server:
    xhttp.open("GET", "ajax_test.asp", true);

    The file can be any kind of file, like .txt and .xml, or server scripting files like .asp and .php (which can perform actions on the server before sending the response back).



000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


Asynchronous - True or False?

Server requests should be sent asynchronously.

The async parameter of the open() method should be set to true:
xhttp.open("GET", "ajax_test.asp", true);

By sending asynchronously, the JavaScript does not have to wait for the server response, but can instead:

    execute other scripts while waiting for server response
    deal with the response after the response is ready


000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


Synchronous Request

To execute a synchronous request, change the third parameter in the open() method to false:
xhttp.open("GET", "ajax_info.txt", false);

Sometimes async = false are used for quick testing. You will also find synchronous requests in older JavaScript code.

Since the code will wait for server completion, there is no need for an onreadystatechange function:


xhttp.open("GET", "ajax_info.txt", false);
xhttp.send();
document.getElementById("demo").innerHTML = xhttp.responseText;



Synchronous XMLHttpRequest (async = false) is not recommended because the JavaScript will stop executing until the server response is ready. If the server is busy or slow, the application will hang or stop.
Synchronous XMLHttpRequest is in the process of being removed from the web standard, but this process can take many years.
Modern developer tools are encouraged to warn about using synchronous requests and may throw an InvalidAccessError exception when it occurs.


000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


The onreadystatechange Property

The readyState property holds the status of the XMLHttpRequest.
The onreadystatechange property defines a function to be executed when the readyState changes.
The status property and the statusText property holds the status of the XMLHttpRequest object.


onreadystatechange 	              Defines a function to be called when the readyState property changes
readyState                              Holds the status of the XMLHttpRequest.
                                  0: request not initialized
                                  1: server connection established
                                  2: request received
                                  3: processing request
                                  4: request finished and response is ready

status                            200: "OK"
                                  403: "Forbidden"
                                  404: "Page not found"
                                  For a complete list go to the https://www.w3schools.com/tags/ref_httpmessages.asp


if (this.readyState == 4 && this.status == 200) {


The onreadystatechange event is triggered four times (1-4), one time for each change in the readyState.























000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

































000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000































000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000




















s
